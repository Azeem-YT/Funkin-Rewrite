package editors;

import FlxSprite;
import flixel.FlxG;

import data.*;
import states.*;
import substates.*;

class StageEditor extends MusicBeatState
{
	public var addedObjects:Map<String, Bool> = new Map<String, Bool>();
	public var boyfriend:Boyfriend;
	public var gf:Character;
	public var dad:Character;

	public var boyfriendX(set, never):Float = 750;
	public var boyfriendY(set, never):Float = 100;

	public var gfX(set, never):Float = 450;
	public var gfY(set, never):Float = 100;

	public var dadX(set, never):Float = 100;
	public var dadY(set, never):Float = 100;

	private var UI_Box:FlxBox;
	private var cameraMAIN:FlxCamera;
	private var cameraUI:FlxCamera;

	public static var curStage:String = 'stage';

	inline function set_boyfriendX(val:Float):Float {
		if (boyfriend != null)
			boyfriend.x = val;

		boyfriendX = val;
		return val;
	}

	inline function set_boyfriendY(val:Float):Float {
		if (boyfriend != null)
			boyfriend.y = val;

		boyfriendY = val;
		return val;
	}
	
	override function create() {
		cameraMAIN = new FlxCamera();
		cameraMAIN.bg.alpha = 0;
		cameraUI = new FlxCamera();
		cameraUI.bg.alpha = 0;
		FlxG.cameras.reset(cameraMAIN);
		FlxG.cameras.add(cameraUI);

		gf = new Character(0, 0, 'gf');
		add(gf);
		
		boyfriend = new Boyfriend(0, 0, 'bf');
		add(boyfriend);

		dad = new Character(0, 0, 'dad');
		add(dad);

		var stageData:StageData = Stage.loadData(curStage);
		if (stageData != null && !stageData.isDefault) {
			boyfriendX = stageData.boyfriendPos[0];
			boyfriendY = stageData.boyfriendPos[1];

			gfX = stageData.gfPos[0];
			gfY = stageData.gfPos[1];

			dadX = stageData.dadPos[0];
			dadY = stageData.dadPos[1];
		}
	}

	public function loadStage(stage:String = 'stage') {
		switch (curStage) {
			default:	
				
		}
	}

	inline function set_gfX(val:Float):Float {
		if (gf != null)
			gf.x = val;

		gfX = val;
		return val;
	}

	inline function set_gfY(val:Float):Float {
		if (gf != null)
			gf.y = val;

		gfY = val;
		return val;
	}

	inline function set_dadX(val:Float):Float {
		if (dad != null)
			dad.x = val;

		dadX = val;
		return val;
	}

	inline function set_dadY(val:Float):Float {
		if (dad != null)
			dad.y = val;

		dadY = val;
		return val;
	}
}